#!/usr/bin/env python
"""Command line interface for User Collection class."""
# global imports
import argparse

# local imports
from src.user_collection import UserCollection

def get_parser():
	"""Create and return a populated argument parser.
	
	Returns:
		(argparse.ArgumentParser): parser.
	"""
	parser = argparse.ArgumentParser(
		description="Display or convert User collection data."
	)
	subparsers = parser.add_subparsers()
	
	display_p = subparsers.add_parser(
		"display",
		help="Command to display file contents."
	)
	display_p.add_argument(
		"filepath",
		type=str,
		help="Path of file to parse and display."
	)
	display_p.add_argument(
		"-fo",
		"--format",
		default="text",
		help="Format to display the file in, options: text, html."
	)
	
	convert_p = subparsers.add_parser(
		"convert",
		help="Command to convert file contents to different file."
	)
	convert_p.add_argument(
		"source_filepath", 
		help="Filepath to parse data from."
	)
	convert_p.add_argument(
		"destination_filepath",
		help="File path to store data to."
	)
	return parser
	
def main():
	"""Main method for executing commands."""
	parser = get_parser()
	args = parser.parse_args()
	
	if hasattr(args, "filepath"):
		# parse and display data.
		data_object = UserCollection(args.filepath)
		data_object.output_to_terminal(args.format)
	elif hasattr(args, "source_filepath") and hasattr(args, "destination_filepath"):
		# convert data
		data_object = UserCollection(args.source_filepath)
		data_object.to_file(args.destination_filepath)

main()